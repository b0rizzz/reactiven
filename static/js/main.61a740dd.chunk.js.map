{"version":3,"sources":["components/common/Navbar.js","components/users/LoginForm.js","dispatcher.js","actions/UserActions.js","helpers.js","env.js","data/UserData.js","stores/UserStore.js","components/users/Auth.js","components/users/LoginPage.js","components/forms/Input.js","components/CreateWordForm.js","actions/WordActions.js","data/WordData.js","stores/WordStore.js","components/common/Alert.js","components/CreateWord.js","components/CreatePhraseForm.js","components/CreatePhrase.js","components/common/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","NavLink","activeClassName","to","Component","LoginForm","props","htmlFor","type","name","placeholder","value","user","email","onChange","password","onClick","onSave","dispatcher","Dispatcher","UserActions","types","REGISTER_USER","LOGIN_USER","register","dispatch","this","login","url","path","arguments","length","undefined","baseUrl","UserData","window","fetch","concat","method","mode","body","JSON","stringify","headers","Content-Type","then","result","json","userStore","_this","data","emit","eventTypes","USER_REGISTERED","_this2","USER_LOGGEDIN","action","userActions","EventEmitter","handleAction","bind","Auth","_token","localStorage","setItem","getItem","removeItem","LoginPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleLogin","assertThisInitialized","on","removeListener","event","target","field","setState","preventDefault","error","authenticateUser","history","push","id","users_LoginForm","handleChange","handleForm","isUserAuthenticated","Input","CreateWordForm","forms_Input","autocapitalize","word","en","transcription","bg","WordActions","CREATE_WORD","CREATE_PHRASE","createWord","createPhrase","phrase","WordData","wordStore","WORD_CREATED","PHRASE_CREATED","wordActions","Alert","display","closeAlert","text","CreateWord","message","alertType","handleCreate","errors","_this$state","Alert_Alert","handleCloseAlert","components_CreateWordForm","getToken","getEmail","CreatePhraseForm","CreatePhrase","components_CreatePhraseForm","Routes","Switch","Route","exact","component","App","components_common_Navbar","common_Routes","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61a740dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n\n    render() {\n\n        return (\n            <div className=\"header\">\n                <NavLink\n                    activeClassName=\"active\"\n                    to=\"/create-word\">\n                    Word\n                </NavLink>\n                <NavLink\n                    activeClassName=\"active\"\n                    to=\"/create-phrase\">\n                    Phrase\n                </NavLink>\n            </div>\n        );\n    }\n}\nexport default Navbar;","import React from 'react';\n\nconst LoginForm = (props) => (\n    <form>\n        <label htmlFor='email'>Email</label>\n        <input\n            type='email'\n            name='email'\n            placeholder='Email'\n            value={props.user.email}\n            onChange={props.onChange}\n        />\n        <br />\n        <label htmlFor='password'>Password</label>\n        <input\n            type='password'\n            name='password'\n            placeholder='Password'\n            value={props.user.password}\n            onChange={props.onChange}\n        />\n            <br/>\n            <input type='submit' value=\"Login\" onClick={props.onSave} />\n    </form>\n);\n\nexport default LoginForm;","import { Dispatcher } from 'flux';\n\nexport default new Dispatcher();","import dispatcher from '../dispatcher';\n\nconst UserActions = {\n    types: {\n        REGISTER_USER: 'REGISTER_USER',\n        LOGIN_USER: 'LOGIN_USER'\n    },\n    register(user) {\n        dispatcher.dispatch({\n            type: this.types.REGISTER_USER,\n            user\n        })\n    },\n    login(user) {\n        dispatcher.dispatch({\n            type: this.types.LOGIN_USER,\n            user\n        })\n    }\n};\n\nexport default UserActions;","import { prodUrl, devUrl } from './env';\n\nexport const url = (path='') => {\n\n    if (process.env.NODE_ENV === 'production') {\n        return prodUrl + path;\n    }\n\n    return devUrl + path;\n};\n\nexport const makeClasses = classes => {\n\n    if (Array.isArray(classes)) {\n\n        return classes.join(' ');\n    }\n\n    return classes;\n};","export const prodUrl = \"https://engrexapi.herokuapp.com\";\nexport const devUrl = \"http://www.engrexapi.com\";","import { url } from '../helpers';\n\nconst baseUrl = url();\n\nclass UserData {\n\n    static register(user) {\n\n        return window.fetch(`${baseUrl}/register`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n    \n    static login(user) {\n        return window.fetch(`${baseUrl}/login`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n}\n\nexport default UserData;","import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher';\nimport userActions from '../actions/UserActions';\nimport UserData from '../data/UserData';\n\nclass UserStore extends EventEmitter {\n    register(user) {\n        UserData\n            .register(user)\n            .then(data => this.emit(this.eventTypes.USER_REGISTERED, data));\n    }\n    \n    login(user) {\n        UserData\n            .login(user)\n            .then(data => this.emit(this.eventTypes.USER_LOGGEDIN, data));\n    }\n\n    handleAction(action) {\n        switch (action.type) {\n            case userActions.types.REGISTER_USER: {\n                this.register(action.user);\n                break;\n            }\n            case userActions.types.LOGIN_USER: {\n                this.login(action.user);\n                break;\n            }\n            default: break;\n        }\n    }\n}\n\nlet userStore = new UserStore();\n\nuserStore.eventTypes = {\n    USER_REGISTERED: 'user_registered',\n    USER_LOGGEDIN: 'user_loggedin'\n};\n\ndispatcher.register(userStore.handleAction.bind(userStore));\n\nexport default userStore;","class Auth {\n    static authenticateUser(data) {\n        let { email, _token } = data\n        localStorage.setItem('_token', _token);\n        localStorage.setItem('email', email);\n    }\n\n    static isUserAuthenticated() {\n        return localStorage.getItem('_token') !== null;\n    }\n\n    static deauthenticateUser() {\n        localStorage.removeItem('_token');\n    }\n\n    static getToken() {\n        return localStorage.getItem('_token');\n    }\n    \n    static getEmail() {\n        return localStorage.getItem('email');\n    }\n}\n\nexport default Auth;","import React, { Component } from 'react';\nimport LoginForm from './LoginForm';\nimport userActions from '../../actions/UserActions';\nimport userStore from '../../stores/UserStore';\nimport Auth from './Auth';\nimport './LoginPage.css';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                email: '',\n                password: ''\n            }\n        };\n\n        this.handleLogin = this.handleLogin.bind(this);\n\n        userStore.on(\n            userStore.eventTypes.USER_LOGGEDIN,\n            this.handleLogin\n        );\n    }\n\n    componentWillUnmount() {\n        userStore.removeListener(\n            userStore.eventTypes.USER_LOGGEDIN,\n            this.handleLogin\n        );\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        const {user} = this.state;\n        user[field] = value;\n\n        this.setState({ user });\n    }\n\n    handleForm(event) {\n        event.preventDefault();\n\n        userActions.login(this.state.user);\n    }\n\n    handleLogin(data) {\n        \n        if(!data.error) {\n            Auth.authenticateUser(data);\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div id=\"loginForm\">\n                    <h1>Login</h1>\n                    <LoginForm\n                        user={this.state.user}\n                        onChange={this.handleChange.bind(this)}\n                        onSave={this.handleForm.bind(this)} />\n                </div>\n            </div>\n        )\n    }\n    \n    componentDidMount() {\n        if( Auth.isUserAuthenticated() ) {\n            this.props.history.push('/');\n        }\n    }\n}\n\nexport default LoginPage;","import React from 'react';\n\nconst Input  = (props) => (\n    <label htmlFor={props.name}>\n        {props.name}\n        <input\n            type={props.type}\n            name={props.name}\n            value={props.value}\n            onChange={props.onChange} \n        />\n    </label>\n);\n\nexport default Input;","import React from 'react';\nimport Input from './forms/Input';\n\nconst CreateWordForm = (props) => (\n    <form>\n        <Input type='text' name='en' autocapitalize='off' value={props.word.en} onChange={props.onChange} />\n        <br />\n        <Input type='text' name='transcription' autocapitalize='off' value={props.word.transcription} onChange={props.onChange} />\n        <br />\n        <Input type='text' name='bg' autocapitalize='off' value={props.word.bg} onChange={props.onChange} />\n        <br/>\n        <input type='submit' value=\"Save\" onClick={props.onSave} />\n    </form>\n);\n\nexport default CreateWordForm;","import dispatcher from '../dispatcher';\n\nconst WordActions = {\n    types: {\n        CREATE_WORD: 'CREATE_WORD',\n        CREATE_PHRASE: 'CREATE_PHRASE',\n    },\n    \n    createWord(word) {\n        dispatcher.dispatch({\n            type: this.types.CREATE_WORD,\n            word\n        })\n    },\n    \n    createPhrase(phrase) {\n        dispatcher.dispatch({\n            type: this.types.CREATE_PHRASE,\n            phrase\n        })\n    },\n};\n\nexport default WordActions;","import { url } from '../helpers';\n\nconst baseUrl = url();\n\nclass WordData {\n\n    static createWord(word) {\n\n        return window.fetch(`${baseUrl}/words/store`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(word),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n\n    static createPhrase(phrase) {\n\n        return window.fetch(`${baseUrl}/phrases/store`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(phrase),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    } \n}\n\nexport default WordData;","import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher';\nimport wordActions from '../actions/WordActions';\nimport WordData from '../data/WordData';\n\nclass WordStore extends EventEmitter {\n    createWord(word) {\n        WordData\n            .createWord(word)\n            .then(data => this.emit(this.eventTypes.WORD_CREATED, data));\n    }\n    \n    createPhrase(phrase) {\n        WordData\n            .createPhrase(phrase)\n            .then(data => this.emit(this.eventTypes.PHRASE_CREATED, data));\n    }\n\n    handleAction(action) {\n        switch (action.type) {\n            case wordActions.types.CREATE_WORD: {\n                this.createWord(action.word);\n                break;\n            }\n            case wordActions.types.CREATE_PHRASE: {\n                this.createPhrase(action.phrase);\n                break;\n            }\n            default: break;\n        }\n    }\n}\n\nlet wordStore = new WordStore();\n\nwordStore.eventTypes = {\n    WORD_CREATED: 'word_created',\n    PHRASE_CREATED: 'phrase_created',\n};\n\ndispatcher.register(wordStore.handleAction.bind(wordStore));\n\nexport default wordStore;","import React from 'react';\nimport './Alert.css';\n\nexport const Alert = (props) => (\n    <div className={`alert ${props.type} ${props.display}`}>\n        <span className=\"closebtn\" onClick={props.closeAlert}>&times;</span>  \n        {props.text}\n    </div>\n);","import React, { Component } from 'react';\nimport CreateWordForm from './CreateWordForm';\nimport wordActions from '../actions/WordActions';\nimport wordStore from '../stores/WordStore';\nimport Auth from './users/Auth';\nimport { Alert } from './common/Alert';\nimport './CreateWord.css';\n\nclass CreateWord extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            word: {\n                en: '',\n                transcription: '',\n                bg: '',\n                _token: '',\n                email: ''\n            },\n            display: 'hidden',\n            message: 'The word was successfully created.',\n            alertType: 'success'\n        };\n\n        this.handleCreate = this.handleCreate.bind(this);\n\n        wordStore.on(\n            wordStore.eventTypes.WORD_CREATED,\n            this.handleCreate\n        );\n    }\n\n    componentWillUnmount() {\n        wordStore.removeListener(\n            wordStore.eventTypes.WORD_CREATED,\n            this.handleCreate\n        );\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        const {word} = this.state;\n        word[field] = value;\n\n        this.setState({ word });\n    }\n\n    handleForm(event) {\n        event.preventDefault();\n\n        wordActions.createWord(this.state.word);\n    }\n\n    handleCreate(data) {\n        if (!data.error) {\n            let {word} = this.state;\n            word['en'] = '';\n            word['transcription'] = '';\n            word['bg'] = '';\n            \n            this.setState({\n                display: '',\n                alertType: 'success',\n                message: 'The word was successfully created.',\n                word\n            });\n        } else if (data.error) {\n            this.setState({\n                display: '',\n                alertType: 'danger',\n                message: data.errors[0]['message']\n            });\n        }\n    }\n    \n    handleCloseAlert(event) {\n        this.setState({display: 'hidden'});\n    }\n\n    render() {\n        \n        let {message, alertType} = this.state;\n\n        return (\n            <div className=\"container\">\n                <div id=\"createWordForm\">\n                    <h1>Create Word</h1>\n                    <Alert type={alertType} display={this.state.display} text={message} closeAlert={this.handleCloseAlert.bind(this)} />\n                    <CreateWordForm\n                        word={this.state.word}\n                        onChange={this.handleChange.bind(this)}\n                        onSave={this.handleForm.bind(this)} />\n                </div>\n            </div>)\n    }\n    \n    componentDidMount() {\n        if( !Auth.isUserAuthenticated() ) {\n            this.props.history.push('/login');\n        } else {\n            let {word} = this.state;\n            word._token = Auth.getToken();\n            word.email = Auth.getEmail();\n            this.setState({ word });\n        }\n    }\n}\n\nexport default CreateWord;","import React from 'react';\nimport Input from './forms/Input';\n\nconst CreatePhraseForm = (props) => (\n    <form>\n        <Input type='text' name='en' value={props.phrase.en} onChange={props.onChange} />\n        <br />\n        <Input type='text' name='bg' value={props.phrase.bg} onChange={props.onChange} />\n        <br/>\n        <input type='submit' value=\"Save\" onClick={props.onSave} />\n    </form>\n);\n\nexport default CreatePhraseForm;","import React, { Component } from 'react';\nimport CreatePhraseForm from './CreatePhraseForm';\nimport wordActions from '../actions/WordActions';\nimport wordStore from '../stores/WordStore';\nimport Auth from './users/Auth';\nimport { Alert } from './common/Alert';\n//~ import './CreateWord.css';\n\nclass CreatePhrase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            //TODO this should be: formData\n            phrase: {\n                en: '',\n                bg: '',\n                _token: '',\n                email: ''\n            },\n            display: 'hidden',\n            message: 'The phrase was successfully created.',\n            alertType: 'success'\n        };\n\n        this.handleCreate = this.handleCreate.bind(this);\n\n        wordStore.on(\n            wordStore.eventTypes.PHRASE_CREATED,\n            this.handleCreate\n        );\n    }\n\n    componentWillUnmount() {\n        wordStore.removeListener(\n            wordStore.eventTypes.PHRASE_CREATED,\n            this.handleCreate\n        );\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        const {phrase} = this.state;\n        phrase[field] = value;\n\n        this.setState({ phrase });\n    }\n\n    handleForm(event) {\n        event.preventDefault();\n\n        wordActions.createPhrase(this.state.phrase);\n    }\n\n    handleCreate(data) {\n        if (!data.error) {\n            let {phrase} = this.state;\n            phrase['en'] = '';\n            phrase['bg'] = '';\n            \n            this.setState({\n                display: '',\n                alertType: 'success',\n                message: 'The phrase was successfully created.',\n                phrase\n            });\n        } else if (data.error) {\n            this.setState({\n                display: '',\n                alertType: 'danger',\n                message: data.errors[0]['message']\n            });\n        }\n    }\n    \n    handleCloseAlert(event) {\n        this.setState({display: 'hidden'});\n    }\n\n    render() {\n        \n        let {message, alertType} = this.state;\n\n        return (\n            <div className=\"container\">\n                <div id=\"createWordForm\">\n                    <h1>Create Phrase</h1>\n                    <Alert type={alertType} display={this.state.display} text={message} closeAlert={this.handleCloseAlert.bind(this)} />\n                    <CreatePhraseForm\n                        phrase={this.state.phrase}\n                        onChange={this.handleChange.bind(this)}\n                        onSave={this.handleForm.bind(this)} />\n                </div>\n            </div>)\n    }\n    \n    componentDidMount() {\n        if( !Auth.isUserAuthenticated() ) {\n            this.props.history.push('/login');\n        } else {\n            let {phrase} = this.state;\n            phrase._token = Auth.getToken();\n            phrase.email = Auth.getEmail();\n            this.setState({ phrase });\n        }\n    }\n}\n\nexport default CreatePhrase;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LoginPage from '../users/LoginPage';\nimport CreateWord from '../CreateWord';\nimport CreatePhrase from '../CreatePhrase';\n\nconst Routes = () => (\n    <Switch>\n        <Route path='/' exact component={CreateWord} />\n        <Route path='/create-word' component={CreateWord} />\n        <Route path='/create-phrase' component={CreatePhrase} />\n        <Route path='/login' component={LoginPage} />\n    </Switch>\n);\n\nexport default Routes;","import React, {Component} from 'react';\nimport Navbar from './components/common/Navbar';\nimport Routes from './components/common/Routes';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar/>\n                <Routes/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}