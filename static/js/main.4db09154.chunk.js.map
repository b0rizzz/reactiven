{"version":3,"sources":["components/common/Navbar.js","components/users/LoginForm.js","dispatcher.js","actions/UserActions.js","helpers.js","env.js","data/UserData.js","stores/UserStore.js","components/users/Auth.js","components/users/LoginPage.js","components/CreateWordForm.js","actions/WordActions.js","data/WordData.js","stores/WordStore.js","components/common/Alert.js","components/CreateWord.js","components/common/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","handleClick","event","test","window","location","href","preventDefault","document","body","scrollTop","documentElement","react_default","a","createElement","className","Link","to","onClick","this","Component","LoginForm","props","htmlFor","type","name","placeholder","value","user","email","onChange","password","onSave","dispatcher","Dispatcher","UserActions","types","REGISTER_USER","LOGIN_USER","register","dispatch","login","url","path","arguments","length","undefined","baseUrl","UserData","fetch","concat","method","mode","JSON","stringify","headers","Content-Type","then","result","json","userStore","_this","data","emit","eventTypes","USER_REGISTERED","_this2","USER_LOGGEDIN","action","userActions","EventEmitter","handleAction","bind","Auth","_token","localStorage","setItem","getItem","removeItem","LoginPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleLogin","assertThisInitialized","on","removeListener","target","field","setState","error","authenticateUser","history","push","id","users_LoginForm","handleChange","handleForm","isUserAuthenticated","CreateWordForm","word","en","transcription","bg","WordActions","CREATE_WORD","createWord","WordData","wordStore","WORD_CREATED","wordActions","Alert","display","closeAlert","text","CreateWord","message","alertType","handleCreate","errors","_this$state","Alert_Alert","handleCloseAlert","components_CreateWordForm","getToken","getEmail","Routes","Switch","Route","exact","component","App","components_common_Navbar","common_Routes","Boolean","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4db09154.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n\n    handleClick = event => {\n        if (/\\/lessons/.test(window.location.href)) {\n            event.preventDefault();\n            document.body.scrollTop = document.documentElement.scrollTop = 0;\n        }\n    };\n\n    render() {\n\n        return (\n            <div className=\"header\">\n                <Link\n                    className=\"active\"\n                    to=\"/\"\n                    onClick={this.handleClick}>\n                    Words and Phrases\n                </Link>\n            </div>\n        );\n    }\n}\nexport default Navbar;","import React from 'react';\n\nconst LoginForm = (props) => (\n    <form>\n        <label htmlFor='email'>Email</label>\n        <input\n            type='email'\n            name='email'\n            placeholder='Email'\n            value={props.user.email}\n            onChange={props.onChange}\n        />\n        <br />\n        <label htmlFor='password'>Password</label>\n        <input\n            type='password'\n            name='password'\n            placeholder='Password'\n            value={props.user.password}\n            onChange={props.onChange}\n        />\n            <br/>\n            <input type='submit' value=\"Login\" onClick={props.onSave} />\n    </form>\n);\n\nexport default LoginForm;","import { Dispatcher } from 'flux';\n\nexport default new Dispatcher();","import dispatcher from '../dispatcher';\n\nconst UserActions = {\n    types: {\n        REGISTER_USER: 'REGISTER_USER',\n        LOGIN_USER: 'LOGIN_USER'\n    },\n    register(user) {\n        dispatcher.dispatch({\n            type: this.types.REGISTER_USER,\n            user\n        })\n    },\n    login(user) {\n        dispatcher.dispatch({\n            type: this.types.LOGIN_USER,\n            user\n        })\n    }\n};\n\nexport default UserActions;","import { prodUrl, devUrl } from './env';\n\nexport const url = (path='') => {\n\n    if (process.env.NODE_ENV === 'production') {\n        return prodUrl + path;\n    }\n\n    return devUrl + path;\n};\n\nexport const makeClasses = classes => {\n\n    if (Array.isArray(classes)) {\n\n        return classes.join(' ');\n    }\n\n    return classes;\n};","export const prodUrl = \"https://engrexapi.herokuapp.com\";\nexport const devUrl = \"http://www.engrexapi.com\";","import { url } from '../helpers';\n\nconst baseUrl = url();\n\nclass UserData {\n\n    static register(user) {\n\n        return window.fetch(`${baseUrl}/register`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n    \n    static login(user) {\n        return window.fetch(`${baseUrl}/login`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n}\n\nexport default UserData;","import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher';\nimport userActions from '../actions/UserActions';\nimport UserData from '../data/UserData';\n\nclass UserStore extends EventEmitter {\n    register(user) {\n        UserData\n            .register(user)\n            .then(data => this.emit(this.eventTypes.USER_REGISTERED, data));\n    }\n    \n    login(user) {\n        UserData\n            .login(user)\n            .then(data => this.emit(this.eventTypes.USER_LOGGEDIN, data));\n    }\n\n    handleAction(action) {\n        switch (action.type) {\n            case userActions.types.REGISTER_USER: {\n                this.register(action.user);\n                break;\n            }\n            case userActions.types.LOGIN_USER: {\n                this.login(action.user);\n                break;\n            }\n            default: break;\n        }\n    }\n}\n\nlet userStore = new UserStore();\n\nuserStore.eventTypes = {\n    USER_REGISTERED: 'user_registered',\n    USER_LOGGEDIN: 'user_loggedin'\n};\n\ndispatcher.register(userStore.handleAction.bind(userStore));\n\nexport default userStore;","class Auth {\n    static authenticateUser(data) {\n        let { email, _token } = data\n        localStorage.setItem('_token', _token);\n        localStorage.setItem('email', email);\n    }\n\n    static isUserAuthenticated() {\n        return localStorage.getItem('_token') !== null;\n    }\n\n    static deauthenticateUser() {\n        localStorage.removeItem('_token');\n    }\n\n    static getToken() {\n        return localStorage.getItem('_token');\n    }\n    \n    static getEmail() {\n        return localStorage.getItem('email');\n    }\n}\n\nexport default Auth;","import React, { Component } from 'react';\nimport LoginForm from './LoginForm';\nimport userActions from '../../actions/UserActions';\nimport userStore from '../../stores/UserStore';\nimport Auth from './Auth';\nimport './LoginPage.css';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                email: '',\n                password: ''\n            }\n        };\n\n        this.handleLogin = this.handleLogin.bind(this);\n\n        userStore.on(\n            userStore.eventTypes.USER_LOGGEDIN,\n            this.handleLogin\n        );\n    }\n\n    componentWillUnmount() {\n        userStore.removeListener(\n            userStore.eventTypes.USER_LOGGEDIN,\n            this.handleLogin\n        );\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        const {user} = this.state;\n        user[field] = value;\n\n        this.setState({ user });\n    }\n\n    handleForm(event) {\n        event.preventDefault();\n\n        userActions.login(this.state.user);\n    }\n\n    handleLogin(data) {\n        \n        if(!data.error) {\n            Auth.authenticateUser(data);\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div id=\"loginForm\">\n                    <h1>Login</h1>\n                    <LoginForm\n                        user={this.state.user}\n                        onChange={this.handleChange.bind(this)}\n                        onSave={this.handleForm.bind(this)} />\n                </div>\n            </div>\n        )\n    }\n    \n    componentDidMount() {\n        if( Auth.isUserAuthenticated() ) {\n            this.props.history.push('/');\n        }\n    }\n}\n\nexport default LoginPage;","import React from 'react';\n\nconst CreateWordForm = (props) => (\n    <form>\n        <label htmlFor='en'>en</label>\n        <input\n            type='text'\n            name='en'\n            value={props.word.en}\n            onChange={props.onChange}\n        />\n        <br />\n        <label htmlFor='transcription'>transcription</label>\n        <input\n            type='text'\n            name='transcription'\n            value={props.word.transcription}\n            onChange={props.onChange}\n        />\n        <br />\n        <label htmlFor='bg'>bg</label>\n        <input\n            type='text'\n            name='bg'\n            value={props.word.bg}\n            onChange={props.onChange}\n        />\n        <br/>\n        <input type='submit' value=\"Save\" onClick={props.onSave} />\n    </form>\n);\n\nexport default CreateWordForm;","import dispatcher from '../dispatcher';\n\nconst WordActions = {\n    types: {\n        CREATE_WORD: 'CREATE_WORD',\n        //~ LOGIN_USER: 'LOGIN_USER'\n    },\n    createWord(word) {\n        dispatcher.dispatch({\n            type: this.types.CREATE_WORD,\n            word\n        })\n    },\n    //~ login(user) {\n        //~ dispatcher.dispatch({\n            //~ type: this.types.LOGIN_USER,\n            //~ user\n        //~ })\n    //~ }\n};\n\nexport default WordActions;","import { url } from '../helpers';\n\nconst baseUrl = url();\n\nclass WordData {\n\n    static createWord(word) {\n\n        return window.fetch(`${baseUrl}/words/store`, {\n            method: 'POST',\n            mode: 'cors',\n            body: JSON.stringify(word),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(result => result.json());\n    }\n    \n    //~ static login(user) {\n        //~ return window.fetch(`${baseUrl}/login`, {\n            //~ method: 'POST',\n            //~ mode: 'cors',\n            //~ body: JSON.stringify(user),\n            //~ headers: {\n                //~ \"Content-Type\": \"application/x-www-form-urlencoded\"\n            //~ }\n        //~ }).then(result => result.json());\n    //~ }\n}\n\nexport default WordData;","import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher';\nimport wordActions from '../actions/WordActions';\nimport WordData from '../data/WordData';\n\nclass WordStore extends EventEmitter {\n    createWord(word) {\n        WordData\n            .createWord(word)\n            .then(data => this.emit(this.eventTypes.WORD_CREATED, data));\n    }\n    \n    //~ login(user) {\n        //~ UserData\n            //~ .login(user)\n            //~ .then(data => this.emit(this.eventTypes.USER_LOGGEDIN, data));\n    //~ }\n\n    handleAction(action) {\n        switch (action.type) {\n            case wordActions.types.CREATE_WORD: {\n                this.createWord(action.word);\n                break;\n            }\n            //~ case userActions.types.LOGIN_USER: {\n                //~ this.login(action.user);\n                //~ break;\n            //~ }\n            default: break;\n        }\n    }\n}\n\nlet wordStore = new WordStore();\n\nwordStore.eventTypes = {\n    WORD_CREATED: 'word_created',\n    //~ USER_LOGGEDIN: 'user_loggedin'\n};\n\ndispatcher.register(wordStore.handleAction.bind(wordStore));\n\nexport default wordStore;","import React from 'react';\nimport './Alert.css';\n\nexport const Alert = (props) => (\n    <div className={`alert ${props.type} ${props.display}`}>\n        <span className=\"closebtn\" onClick={props.closeAlert}>&times;</span>  \n        {props.text}\n    </div>\n);","import React, { Component } from 'react';\nimport CreateWordForm from './CreateWordForm';\nimport wordActions from '../actions/WordActions';\nimport wordStore from '../stores/WordStore';\nimport Auth from './users/Auth';\nimport { Alert } from './common/Alert';\nimport './CreateWord.css';\n\nclass CreateWord extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            word: {\n                en: '',\n                transcription: '',\n                bg: '',\n                _token: '',\n                email: ''\n            },\n            display: 'hidden',\n            message: 'The word was successfully created.',\n            alertType: 'success'\n        };\n\n        this.handleCreate = this.handleCreate.bind(this);\n\n        wordStore.on(\n            wordStore.eventTypes.WORD_CREATED,\n            this.handleCreate\n        );\n    }\n\n    componentWillUnmount() {\n        wordStore.removeListener(\n            wordStore.eventTypes.WORD_CREATED,\n            this.handleCreate\n        );\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        const {word} = this.state;\n        word[field] = value;\n\n        this.setState({ word });\n    }\n\n    handleForm(event) {\n        event.preventDefault();\n\n        wordActions.createWord(this.state.word);\n    }\n\n    handleCreate(data) {\n        if (!data.error) {\n            let {word} = this.state;\n            word['en'] = '';\n            word['transcription'] = '';\n            word['bg'] = '';\n            \n            this.setState({\n                display: '',\n                alertType: 'success',\n                message: 'The word was successfully created.',\n                word\n            });\n        } else if (data.error) {\n            this.setState({\n                display: '',\n                alertType: 'danger',\n                message: data.errors[0]['message']\n            });\n        }\n    }\n    \n    handleCloseAlert(event) {\n        this.setState({display: 'hidden'});\n    }\n\n    render() {\n        \n        let {message, alertType} = this.state;\n\n        return (\n            <div className=\"container\">\n                <div id=\"createWordForm\">\n                    <h1>Create Word</h1>\n                    <Alert type={alertType} display={this.state.display} text={message} closeAlert={this.handleCloseAlert.bind(this)} />\n                    <CreateWordForm\n                        word={this.state.word}\n                        onChange={this.handleChange.bind(this)}\n                        onSave={this.handleForm.bind(this)} />\n                </div>\n            </div>)\n    }\n    \n    componentDidMount() {\n        if( !Auth.isUserAuthenticated() ) {\n            this.props.history.push('/login');\n        } else {\n            let {word} = this.state;\n            word._token = Auth.getToken();\n            word.email = Auth.getEmail();\n            this.setState({ word });\n        }\n    }\n}\n\nexport default CreateWord;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LoginPage from '../users/LoginPage';\nimport CreateWord from '../CreateWord';\n\nconst Routes = () => (\n    <Switch>\n        <Route path='/' exact component={CreateWord} />\n        <Route path='/login' component={LoginPage} />\n    </Switch>\n);\n\nexport default Routes;","import React, {Component} from 'react';\nimport Navbar from './components/common/Navbar';\nimport Routes from './components/common/Routes';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar/>\n                <Routes/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}